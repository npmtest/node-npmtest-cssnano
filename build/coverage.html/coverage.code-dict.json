{"/home/travis/build/npmtest/node-npmtest-cssnano/test.js":"/* istanbul instrument in package npmtest_cssnano */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cssnano/lib.npmtest_cssnano.js":"/* istanbul instrument in package npmtest_cssnano */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cssnano = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cssnano = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cssnano/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cssnano && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cssnano */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cssnano\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cssnano.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cssnano.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cssnano.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cssnano.__dirname + '/lib.npmtest_cssnano.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cssnano/node_modules/cssnano/dist/index.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _decamelize = require('decamelize');\n\nvar _decamelize2 = _interopRequireDefault(_decamelize);\n\nvar _defined = require('defined');\n\nvar _defined2 = _interopRequireDefault(_defined);\n\nvar _objectAssign = require('object-assign');\n\nvar _objectAssign2 = _interopRequireDefault(_objectAssign);\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _postcssFilterPlugins2 = require('postcss-filter-plugins');\n\nvar _postcssFilterPlugins3 = _interopRequireDefault(_postcssFilterPlugins2);\n\nvar _postcssDiscardComments = require('postcss-discard-comments');\n\nvar _postcssDiscardComments2 = _interopRequireDefault(_postcssDiscardComments);\n\nvar _postcssReduceInitial = require('postcss-reduce-initial');\n\nvar _postcssReduceInitial2 = _interopRequireDefault(_postcssReduceInitial);\n\nvar _postcssMinifyGradients = require('postcss-minify-gradients');\n\nvar _postcssMinifyGradients2 = _interopRequireDefault(_postcssMinifyGradients);\n\nvar _postcssSvgo = require('postcss-svgo');\n\nvar _postcssSvgo2 = _interopRequireDefault(_postcssSvgo);\n\nvar _postcssReduceTransforms = require('postcss-reduce-transforms');\n\nvar _postcssReduceTransforms2 = _interopRequireDefault(_postcssReduceTransforms);\n\nvar _autoprefixer = require('autoprefixer');\n\nvar _autoprefixer2 = _interopRequireDefault(_autoprefixer);\n\nvar _postcssZindex = require('postcss-zindex');\n\nvar _postcssZindex2 = _interopRequireDefault(_postcssZindex);\n\nvar _postcssConvertValues = require('postcss-convert-values');\n\nvar _postcssConvertValues2 = _interopRequireDefault(_postcssConvertValues);\n\nvar _postcssCalc = require('postcss-calc');\n\nvar _postcssCalc2 = _interopRequireDefault(_postcssCalc);\n\nvar _postcssColormin = require('postcss-colormin');\n\nvar _postcssColormin2 = _interopRequireDefault(_postcssColormin);\n\nvar _postcssOrderedValues = require('postcss-ordered-values');\n\nvar _postcssOrderedValues2 = _interopRequireDefault(_postcssOrderedValues);\n\nvar _postcssMinifySelectors = require('postcss-minify-selectors');\n\nvar _postcssMinifySelectors2 = _interopRequireDefault(_postcssMinifySelectors);\n\nvar _postcssMinifyParams = require('postcss-minify-params');\n\nvar _postcssMinifyParams2 = _interopRequireDefault(_postcssMinifyParams);\n\nvar _postcssNormalizeCharset = require('postcss-normalize-charset');\n\nvar _postcssNormalizeCharset2 = _interopRequireDefault(_postcssNormalizeCharset);\n\nvar _postcssMinifyFontValues = require('postcss-minify-font-values');\n\nvar _postcssMinifyFontValues2 = _interopRequireDefault(_postcssMinifyFontValues);\n\nvar _postcssDiscardUnused = require('postcss-discard-unused');\n\nvar _postcssDiscardUnused2 = _interopRequireDefault(_postcssDiscardUnused);\n\nvar _postcssNormalizeUrl = require('postcss-normalize-url');\n\nvar _postcssNormalizeUrl2 = _interopRequireDefault(_postcssNormalizeUrl);\n\nvar _postcssMergeIdents = require('postcss-merge-idents');\n\nvar _postcssMergeIdents2 = _interopRequireDefault(_postcssMergeIdents);\n\nvar _postcssReduceIdents = require('postcss-reduce-idents');\n\nvar _postcssReduceIdents2 = _interopRequireDefault(_postcssReduceIdents);\n\nvar _postcssMergeLonghand = require('postcss-merge-longhand');\n\nvar _postcssMergeLonghand2 = _interopRequireDefault(_postcssMergeLonghand);\n\nvar _postcssDiscardDuplicates = require('postcss-discard-duplicates');\n\nvar _postcssDiscardDuplicates2 = _interopRequireDefault(_postcssDiscardDuplicates);\n\nvar _postcssDiscardOverridden = require('postcss-discard-overridden');\n\nvar _postcssDiscardOverridden2 = _interopRequireDefault(_postcssDiscardOverridden);\n\nvar _postcssMergeRules = require('postcss-merge-rules');\n\nvar _postcssMergeRules2 = _interopRequireDefault(_postcssMergeRules);\n\nvar _postcssDiscardEmpty = require('postcss-discard-empty');\n\nvar _postcssDiscardEmpty2 = _interopRequireDefault(_postcssDiscardEmpty);\n\nvar _postcssUniqueSelectors = require('postcss-unique-selectors');\n\nvar _postcssUniqueSelectors2 = _interopRequireDefault(_postcssUniqueSelectors);\n\nvar _functionOptimiser = require('./lib/functionOptimiser');\n\nvar _functionOptimiser2 = _interopRequireDefault(_functionOptimiser);\n\nvar _filterOptimiser = require('./lib/filterOptimiser');\n\nvar _filterOptimiser2 = _interopRequireDefault(_filterOptimiser);\n\nvar _normalizeString = require('./lib/normalizeString');\n\nvar _normalizeString2 = _interopRequireDefault(_normalizeString);\n\nvar _normalizeUnicode = require('./lib/normalizeUnicode');\n\nvar _normalizeUnicode2 = _interopRequireDefault(_normalizeUnicode);\n\nvar _reduceDisplayValues = require('./lib/reduceDisplayValues');\n\nvar _reduceDisplayValues2 = _interopRequireDefault(_reduceDisplayValues);\n\nvar _reduceBackgroundRepeat = require('./lib/reduceBackgroundRepeat');\n\nvar _reduceBackgroundRepeat2 = _interopRequireDefault(_reduceBackgroundRepeat);\n\nvar _reducePositions = require('./lib/reducePositions');\n\nvar _reducePositions2 = _interopRequireDefault(_reducePositions);\n\nvar _core = require('./lib/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _reduceTimingFunctions = require('./lib/reduceTimingFunctions');\n\nvar _reduceTimingFunctions2 = _interopRequireDefault(_reduceTimingFunctions);\n\nvar _styleCache = require('./lib/styleCache');\n\nvar _styleCache2 = _interopRequireDefault(_styleCache);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Processors\nvar processors = {\n    postcssFilterPlugins: function postcssFilterPlugins() {\n        return (0, _postcssFilterPlugins3.default)({ silent: true });\n    },\n    postcssDiscardComments: _postcssDiscardComments2.default,\n    postcssMinifyGradients: _postcssMinifyGradients2.default,\n    postcssReduceInitial: _postcssReduceInitial2.default,\n    postcssSvgo: _postcssSvgo2.default,\n    reduceDisplayValues: _reduceDisplayValues2.default,\n    postcssReduceTransforms: _postcssReduceTransforms2.default,\n    autoprefixer: _autoprefixer2.default,\n    postcssZindex: _postcssZindex2.default,\n    postcssConvertValues: _postcssConvertValues2.default,\n    reduceTimingFunctions: _reduceTimingFunctions2.default,\n    postcssCalc: _postcssCalc2.default,\n    postcssColormin: _postcssColormin2.default,\n    postcssOrderedValues: _postcssOrderedValues2.default,\n    postcssMinifySelectors: _postcssMinifySelectors2.default,\n    postcssMinifyParams: _postcssMinifyParams2.default,\n    postcssNormalizeCharset: _postcssNormalizeCharset2.default,\n    postcssDiscardOverridden: _postcssDiscardOverridden2.default,\n    normalizeString: _normalizeString2.default,\n    normalizeUnicode: _normalizeUnicode2.default,\n    // minify-font-values should be run before discard-unused\n    postcssMinifyFontValues: _postcssMinifyFontValues2.default,\n    postcssDiscardUnused: _postcssDiscardUnused2.default,\n    postcssNormalizeUrl: _postcssNormalizeUrl2.default,\n    functionOptimiser: _functionOptimiser2.default,\n    filterOptimiser: _filterOptimiser2.default,\n    reduceBackgroundRepeat: _reduceBackgroundRepeat2.default,\n    reducePositions: _reducePositions2.default,\n    core: _core2.default,\n    // Optimisations after this are sensitive to previous optimisations in\n    // the pipe, such as whitespace normalising/selector re-ordering\n    postcssMergeIdents: _postcssMergeIdents2.default,\n    postcssReduceIdents: _postcssReduceIdents2.default,\n    postcssMergeLonghand: _postcssMergeLonghand2.default,\n    postcssDiscardDuplicates: _postcssDiscardDuplicates2.default,\n    postcssMergeRules: _postcssMergeRules2.default,\n    postcssDiscardEmpty: _postcssDiscardEmpty2.default,\n    postcssUniqueSelectors: _postcssUniqueSelectors2.default,\n    styleCache: _styleCache2.default\n};\n\nvar defaultOptions = {\n    autoprefixer: {\n        add: false\n    },\n    postcssConvertValues: {\n        length: false\n    },\n    postcssNormalizeCharset: {\n        add: false\n    }\n};\n\nvar safeOptions = {\n    postcssConvertValues: {\n        length: false\n    },\n    postcssDiscardUnused: {\n        disable: true\n    },\n    postcssMergeIdents: {\n        disable: true\n    },\n    postcssReduceIdents: {\n        counterStyle: false,\n        gridTemplate: false,\n        keyframes: false\n    },\n    postcssNormalizeUrl: {\n        stripWWW: false\n    },\n    postcssZindex: {\n        disable: true\n    }\n};\n\nvar cssnano = _postcss2.default.plugin('cssnano', function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    // Prevent PostCSS from throwing when safe is defined\n    if (options.safe === true) {\n        options.isSafe = true;\n        options.safe = null;\n    }\n\n    var safe = options.isSafe;\n    var proc = (0, _postcss2.default)();\n    var warnings = [];\n\n    if (typeof options.fontFamily !== 'undefined' || typeof options.minifyFontWeight !== 'undefined') {\n        warnings.push('The fontFamily & minifyFontWeight options have been ' + 'consolidated into minifyFontValues, and are now deprecated.');\n        if (!options.minifyFontValues) {\n            options.minifyFontValues = options.fontFamily;\n        }\n    }\n\n    if (typeof options.singleCharset !== 'undefined') {\n        warnings.push('The singleCharset option has been renamed to ' + 'normalizeCharset, and is now deprecated.');\n        options.normalizeCharset = options.singleCharset;\n    }\n\n    if (warnings.length) {\n        proc.use(_postcss2.default.plugin('cssnano', function () {\n            return function (css, result) {\n                return warnings.forEach(function (w) {\n                    return result.warn(w);\n                });\n            };\n        }));\n    }\n\n    Object.keys(processors).forEach(function (plugin) {\n        var shortName = plugin.replace('postcss', '');\n        shortName = shortName.slice(0, 1).toLowerCase() + shortName.slice(1);\n\n        var opts = (0, _defined2.default)(options[shortName], options[plugin], options[(0, _decamelize2.default)(plugin, '-')]);\n\n        if (opts === false) {\n            opts = { disable: true };\n        }\n\n        opts = (0, _objectAssign2.default)({}, defaultOptions[plugin], safe ? safeOptions[plugin] : null, opts);\n\n        if (!opts.disable) {\n            proc.use(processors[plugin](opts));\n        }\n    });\n\n    return proc;\n});\n\ncssnano.process = function (css) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    options.map = options.map || (options.sourcemap ? true : null);\n    return (0, _postcss2.default)([cssnano(options)]).process(css, options);\n};\n\nexports.default = cssnano;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-cssnano/node_modules/cssnano/dist/lib/functionOptimiser.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _postcss = require('postcss');\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction reduceCalcWhitespaces(node) {\n    if (node.type === 'space') {\n        node.value = ' ';\n    } else if (node.type === 'function') {\n        node.before = node.after = '';\n    }\n}\n\nfunction reduceWhitespaces(node) {\n    if (node.type === 'space') {\n        node.value = ' ';\n    } else if (node.type === 'div') {\n        node.before = node.after = '';\n    } else if (node.type === 'function') {\n        node.before = node.after = '';\n        if (node.value === 'calc') {\n            _postcssValueParser2.default.walk(node.nodes, reduceCalcWhitespaces);\n            return false;\n        }\n    }\n}\n\nfunction transformDecls(decl) {\n    if (!/filter/.test(decl.prop)) {\n        decl.value = (0, _postcssValueParser2.default)(decl.value).walk(reduceWhitespaces).toString();\n    }\n}\n\nexports.default = (0, _postcss.plugin)('cssnano-function-optimiser', function () {\n    return function (css) {\n        return css.walkDecls(transformDecls);\n    };\n});\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-cssnano/node_modules/cssnano/dist/lib/filterOptimiser.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _postcss = require('postcss');\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction filterOptimiser(decl) {\n    decl.value = (0, _postcssValueParser2.default)(decl.value).walk(function (node) {\n        if (node.type === 'function' || node.type === 'div' && node.value === ',') {\n            node.before = node.after = '';\n        }\n    }).toString();\n}\n\nexports.default = (0, _postcss.plugin)('cssnano-filter-optimiser', function () {\n    return function (css) {\n        return css.walkDecls(/filter/, filterOptimiser);\n    };\n});\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-cssnano/node_modules/cssnano/dist/lib/normalizeString.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar postcss = require('postcss');\nvar valueParser = require('postcss-value-parser');\n\n/*\n * Constants (parser usage)\n */\n\nvar SINGLE_QUOTE = 39;\nvar DOUBLE_QUOTE = 34;\nvar BACKSLASH = 92;\nvar NEWLINE = 10;\nvar SPACE = 32;\nvar FEED = 12;\nvar TAB = 9;\nvar CR = 13;\n\nvar WORD_END = /[ \\n\\t\\r\\f'\"\\\\]/g;\n\n/*\n * Constants (node type strings)\n */\n\nvar C_STRING = 'string';\nvar C_ESCAPED_SINGLE_QUOTE = 'escapedSingleQuote';\nvar C_ESCAPED_DOUBLE_QUOTE = 'escapedDoubleQuote';\nvar C_SINGLE_QUOTE = 'singleQuote';\nvar C_DOUBLE_QUOTE = 'doubleQuote';\nvar C_NEWLINE = 'newline';\nvar C_SINGLE = 'single';\n\n/*\n * Literals\n */\n\nvar L_SINGLE_QUOTE = '\\'';\nvar L_DOUBLE_QUOTE = '\"';\nvar L_NEWLINE = '\\\\\\n';\n\n/*\n * Parser nodes\n */\n\nvar T_ESCAPED_SINGLE_QUOTE = { type: C_ESCAPED_SINGLE_QUOTE, value: '\\\\\\'' };\nvar T_ESCAPED_DOUBLE_QUOTE = { type: C_ESCAPED_DOUBLE_QUOTE, value: '\\\\\"' };\nvar T_SINGLE_QUOTE = { type: C_SINGLE_QUOTE, value: L_SINGLE_QUOTE };\nvar T_DOUBLE_QUOTE = { type: C_DOUBLE_QUOTE, value: L_DOUBLE_QUOTE };\nvar T_NEWLINE = { type: C_NEWLINE, value: L_NEWLINE };\n\nfunction stringify(ast) {\n    return ast.nodes.reduce(function (str, _ref) {\n        var value = _ref.value;\n\n        // Collapse multiple line strings automatically\n        if (value === L_NEWLINE) {\n            return str;\n        }\n        return str + value;\n    }, '');\n}\n\nfunction parse(str) {\n    var code = void 0,\n        next = void 0,\n        value = void 0;\n    var pos = 0;\n    var len = str.length;\n\n    var ast = {\n        nodes: [],\n        types: {\n            escapedSingleQuote: 0,\n            escapedDoubleQuote: 0,\n            singleQuote: 0,\n            doubleQuote: 0\n        },\n        quotes: false\n    };\n\n    while (pos < len) {\n        code = str.charCodeAt(pos);\n        switch (code) {\n            case SPACE:\n            case TAB:\n            case CR:\n            case FEED:\n                next = pos;\n                do {\n                    next += 1;\n                    code = str.charCodeAt(next);\n                } while (code === SPACE || code === NEWLINE || code === TAB || code === CR || code === FEED);\n\n                ast.nodes.push({\n                    type: 'space',\n                    value: str.slice(pos, next)\n                });\n                pos = next - 1;\n                break;\n            case SINGLE_QUOTE:\n                ast.nodes.push(T_SINGLE_QUOTE);\n                ast.types[C_SINGLE_QUOTE]++;\n                ast.quotes = true;\n                break;\n            case DOUBLE_QUOTE:\n                ast.nodes.push(T_DOUBLE_QUOTE);\n                ast.types[C_DOUBLE_QUOTE]++;\n                ast.quotes = true;\n                break;\n            case BACKSLASH:\n                next = pos + 1;\n                if (str.charCodeAt(next) === SINGLE_QUOTE) {\n                    ast.nodes.push(T_ESCAPED_SINGLE_QUOTE);\n                    ast.types[C_ESCAPED_SINGLE_QUOTE]++;\n                    ast.quotes = true;\n                    pos = next;\n                    break;\n                } else if (str.charCodeAt(next) === DOUBLE_QUOTE) {\n                    ast.nodes.push(T_ESCAPED_DOUBLE_QUOTE);\n                    ast.types[C_ESCAPED_DOUBLE_QUOTE]++;\n                    ast.quotes = true;\n                    pos = next;\n                    break;\n                } else if (str.charCodeAt(next) === NEWLINE) {\n                    ast.nodes.push(T_NEWLINE);\n                    pos = next;\n                    break;\n                }\n            /*\n             * We need to fall through here to handle the token as\n             * a whole word. The missing 'break' is intentional.\n             */\n            default:\n                WORD_END.lastIndex = pos + 1;\n                WORD_END.test(str);\n\n                if (WORD_END.lastIndex === 0) {\n                    next = len - 1;\n                } else {\n                    next = WORD_END.lastIndex - 2;\n                }\n\n                value = str.slice(pos, next + 1);\n\n                ast.nodes.push({\n                    type: C_STRING,\n                    value: value\n                });\n\n                pos = next;\n        }\n        pos++;\n    }\n\n    return ast;\n}\n\nfunction changeWrappingQuotes(node, ast) {\n    var types = ast.types;\n\n    if (types[C_SINGLE_QUOTE] || types[C_DOUBLE_QUOTE]) {\n        return;\n    }\n\n    if (node.quote === L_SINGLE_QUOTE && types[C_ESCAPED_SINGLE_QUOTE] > 0 && !types[C_ESCAPED_DOUBLE_QUOTE]) {\n        node.quote = L_DOUBLE_QUOTE;\n    }\n\n    if (node.quote === L_DOUBLE_QUOTE && types[C_ESCAPED_DOUBLE_QUOTE] > 0 && !types[C_ESCAPED_SINGLE_QUOTE]) {\n        node.quote = L_SINGLE_QUOTE;\n    }\n\n    ast.nodes = ast.nodes.reduce(function (newAst, child) {\n        if (child.type === C_ESCAPED_DOUBLE_QUOTE && node.quote === L_SINGLE_QUOTE) {\n            return [].concat(newAst, [T_DOUBLE_QUOTE]);\n        }\n        if (child.type === C_ESCAPED_SINGLE_QUOTE && node.quote === L_DOUBLE_QUOTE) {\n            return [].concat(newAst, [T_SINGLE_QUOTE]);\n        }\n        return [].concat(newAst, [child]);\n    }, []);\n}\n\nfunction normalize(value, preferredQuote) {\n    if (!value || !value.length) {\n        return value;\n    }\n    return valueParser(value).walk(function (child) {\n        if (child.type !== C_STRING) {\n            return;\n        }\n        var ast = parse(child.value);\n        if (ast.quotes) {\n            changeWrappingQuotes(child, ast);\n        } else if (preferredQuote === C_SINGLE) {\n            child.quote = L_SINGLE_QUOTE;\n        } else {\n            child.quote = L_DOUBLE_QUOTE;\n        }\n        child.value = stringify(ast);\n    }).toString();\n}\n\nexports.default = postcss.plugin('cssnano-normalize-string', function (opts) {\n    var _preferredQuote$opts = _extends({\n        preferredQuote: 'double'\n    }, opts),\n        preferredQuote = _preferredQuote$opts.preferredQuote;\n\n    return function (css) {\n        css.walk(function (node) {\n            if (node.type === 'rule') {\n                node.selector = normalize(node.selector, preferredQuote);\n            }\n            if (node.type === 'decl') {\n                node.value = normalize(node.value, preferredQuote);\n            }\n            if (node.type === 'atrule') {\n                node.params = normalize(node.params, preferredQuote);\n            }\n        });\n    };\n});\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-cssnano/node_modules/cssnano/dist/lib/normalizeUnicode.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction unicode(range) {\n    var values = range.slice(2).split('-');\n    if (values.length < 2) {\n        return range;\n    }\n    var left = values[0].split('');\n    var right = values[1].split('');\n\n    if (left.length !== right.length) {\n        return range;\n    }\n\n    var questionCounter = 0;\n\n    var merged = left.reduce(function (group, value, index) {\n        if (group === false) {\n            return false;\n        }\n        if (value === right[index] && !questionCounter) {\n            return group + value;\n        }\n        if (value === '0' && right[index] === 'f') {\n            questionCounter++;\n            return group + '?';\n        }\n        return false;\n    }, 'u+');\n\n    /*\n     * The maximum number of wildcard characters (?) for ranges is 5.\n     */\n\n    if (merged && questionCounter < 6) {\n        return merged;\n    }\n\n    return range;\n}\n\nexports.default = _postcss2.default.plugin('cssnano-normalize-unicode', function () {\n    return function (css) {\n        css.walkDecls(/^unicode-range$/i, function (node) {\n            node.prop = 'unicode-range';\n            node.value = (0, _postcssValueParser2.default)(node.value).walk(function (child) {\n                if (child.type === 'word') {\n                    child.value = unicode(child.value.toLowerCase());\n                }\n                return false;\n            }).toString();\n        });\n    };\n});\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-cssnano/node_modules/cssnano/dist/lib/reduceDisplayValues.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);\n\nvar _evenValues = require('./evenValues');\n\nvar _evenValues2 = _interopRequireDefault(_evenValues);\n\nvar _getMatch = require('./getMatch');\n\nvar _getMatch2 = _interopRequireDefault(_getMatch);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Specification: https://drafts.csswg.org/css-display/#the-display-properties\n */\n\nvar mappings = [['block', ['block', 'flow']], ['flow-root', ['block', 'flow-root']], ['inline', ['inline', 'flow']], ['inline-block', ['inline', 'flow-root']], ['run-in', ['run-in', 'flow']], ['list-item', ['list-item', 'block', 'flow']], ['inline-list-item', ['list-item', 'inline', 'flow']], ['flex', ['block', 'flex']], ['inline-flex', ['inline', 'flex']], ['grid', ['block', 'grid']], ['inline-grid', ['inline', 'grid']], ['ruby', ['inline', 'ruby']], ['table', ['block', 'table']], ['inline-table', ['inline', 'table']], ['table-cell', ['table-cell', 'flow']], ['table-caption', ['table-caption', 'flow']], ['ruby-base', ['ruby-base', 'flow']], ['ruby-text', ['ruby-text', 'flow']]];\n\nvar getMatch = (0, _getMatch2.default)(mappings);\n\nfunction transform(node) {\n    var _valueParser = (0, _postcssValueParser2.default)(node.value),\n        nodes = _valueParser.nodes;\n\n    if (nodes.length === 1) {\n        return;\n    }\n    var match = getMatch(nodes.filter(_evenValues2.default).map(function (n) {\n        return n.value;\n    }));\n    if (match.length) {\n        node.value = match[0][0];\n    }\n}\n\nvar plugin = _postcss2.default.plugin('cssnano-reduce-display-values', function () {\n    return function (css) {\n        return css.walkDecls('display', transform);\n    };\n});\n\nplugin.mappings = mappings;\n\nexports.default = plugin;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-cssnano/node_modules/cssnano/dist/lib/evenValues.js":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = getEvenValues;\nfunction getEvenValues(list, index) {\n    return index % 2 === 0;\n}\nmodule.exports = exports[\"default\"];","/home/travis/build/npmtest/node-npmtest-cssnano/node_modules/cssnano/dist/lib/getMatch.js":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = getMatchFactory;\nfunction getMatchFactory(mappings) {\n    return function getMatch(args) {\n        return args.reduce(function (list, arg, i) {\n            return list.filter(function (keyword) {\n                return keyword[1][i] === arg;\n            });\n        }, mappings);\n    };\n}\nmodule.exports = exports[\"default\"];","/home/travis/build/npmtest/node-npmtest-cssnano/node_modules/cssnano/dist/lib/reduceBackgroundRepeat.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);\n\nvar _evenValues = require('./evenValues');\n\nvar _evenValues2 = _interopRequireDefault(_evenValues);\n\nvar _getArguments = require('./getArguments');\n\nvar _getArguments2 = _interopRequireDefault(_getArguments);\n\nvar _getMatch = require('./getMatch');\n\nvar _getMatch2 = _interopRequireDefault(_getMatch);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar mappings = [['repeat-x', ['repeat', 'no-repeat']], ['repeat-y', ['no-repeat', 'repeat']], ['repeat', ['repeat', 'repeat']], ['space', ['space', 'space']], ['round', ['round', 'round']], ['no-repeat', ['no-repeat', 'no-repeat']]];\n\nvar repeat = [mappings[0][0], mappings[1][0], mappings[2][0], mappings[3][0], mappings[4][0], mappings[5][0]];\n\nvar getMatch = (0, _getMatch2.default)(mappings);\n\nfunction transform(decl) {\n    var values = (0, _postcssValueParser2.default)(decl.value);\n    if (values.nodes.length === 1) {\n        return;\n    }\n    var args = (0, _getArguments2.default)(values);\n    var relevant = [];\n    args.forEach(function (arg) {\n        relevant.push({\n            start: null,\n            end: null\n        });\n        arg.forEach(function (part, index) {\n            var isRepeat = ~repeat.indexOf(part.value);\n            var len = relevant.length - 1;\n            if (relevant[len].start === null && isRepeat) {\n                relevant[len].start = index;\n                relevant[len].end = index;\n                return;\n            }\n            if (relevant[len].start !== null) {\n                if (part.type === 'space') {\n                    return;\n                } else if (isRepeat) {\n                    relevant[len].end = index;\n                    return;\n                }\n                return;\n            }\n        });\n    });\n    relevant.forEach(function (range, index) {\n        if (range.start === null) {\n            return;\n        }\n        var val = args[index].slice(range.start, range.end + 1);\n        if (val.length !== 3) {\n            return;\n        }\n        var match = getMatch(val.filter(_evenValues2.default).map(function (n) {\n            return n.value;\n        }));\n        if (match.length) {\n            args[index][range.start].value = match[0][0];\n            args[index][range.start + 1].value = '';\n            args[index][range.end].value = '';\n        }\n    });\n    decl.value = values.toString();\n}\n\nvar plugin = _postcss2.default.plugin('cssnano-reduce-background-repeat', function () {\n    return function (css) {\n        return css.walkDecls(/background(-repeat|$)/, transform);\n    };\n});\n\nplugin.mappings = mappings;\n\nexports.default = plugin;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-cssnano/node_modules/cssnano/dist/lib/getArguments.js":"'use strict';\n\nexports.__esModule = true;\nexports.default = getArguments;\nfunction getArguments(node) {\n    return node.nodes.reduce(function (list, child) {\n        if (child.type !== 'div') {\n            list[list.length - 1].push(child);\n        } else {\n            list.push([]);\n        }\n        return list;\n    }, [[]]);\n}\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-cssnano/node_modules/cssnano/dist/lib/reducePositions.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _postcss = require('postcss');\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);\n\nvar _has = require('has');\n\nvar _has2 = _interopRequireDefault(_has);\n\nvar _getArguments = require('./getArguments');\n\nvar _getArguments2 = _interopRequireDefault(_getArguments);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar directions = ['top', 'right', 'bottom', 'left', 'center'];\nvar properties = ['background', 'background-position', '-webkit-perspective-origin', 'perspective-origin'];\n\nvar center = '50%';\n\nvar horizontal = {\n    right: '100%',\n    left: '0'\n};\n\nvar vertical = {\n    bottom: '100%',\n    top: '0'\n};\n\nfunction transform(decl) {\n    if (!~properties.indexOf(decl.prop)) {\n        return;\n    }\n    var values = (0, _postcssValueParser2.default)(decl.value);\n    var args = (0, _getArguments2.default)(values);\n    var relevant = [];\n    args.forEach(function (arg) {\n        relevant.push({\n            start: null,\n            end: null\n        });\n        arg.forEach(function (part, index) {\n            var isPosition = ~directions.indexOf(part.value) || (0, _postcssValueParser.unit)(part.value);\n            var len = relevant.length - 1;\n            if (relevant[len].start === null && isPosition) {\n                relevant[len].start = index;\n                relevant[len].end = index;\n                return;\n            }\n            if (relevant[len].start !== null) {\n                if (part.type === 'space') {\n                    return;\n                } else if (isPosition) {\n                    relevant[len].end = index;\n                    return;\n                }\n                return;\n            }\n        });\n    });\n    relevant.forEach(function (range, index) {\n        if (range.start === null) {\n            return;\n        }\n        var position = args[index].slice(range.start, range.end + 1);\n        if (position.length > 3) {\n            return;\n        }\n        if (position.length === 1 || position[2].value === 'center') {\n            if (position[2]) {\n                position[2].value = position[1].value = '';\n            }\n            var value = position[0].value;\n\n            var map = _extends({}, horizontal, {\n                center: center\n            });\n            if ((0, _has2.default)(map, value)) {\n                position[0].value = map[value];\n            }\n            return;\n        }\n        if (position[0].value === 'center' && ~directions.indexOf(position[2].value)) {\n            position[0].value = position[1].value = '';\n            var _value = position[2].value;\n\n            if ((0, _has2.default)(horizontal, _value)) {\n                position[2].value = horizontal[_value];\n            }\n            return;\n        }\n        if ((0, _has2.default)(horizontal, position[0].value) && (0, _has2.default)(vertical, position[2].value)) {\n            position[0].value = horizontal[position[0].value];\n            position[2].value = vertical[position[2].value];\n            return;\n        } else if ((0, _has2.default)(vertical, position[0].value) && (0, _has2.default)(horizontal, position[2].value)) {\n            var first = position[0].value;\n            position[0].value = horizontal[position[2].value];\n            position[2].value = vertical[first];\n            return;\n        }\n    });\n    decl.value = values.toString();\n}\n\nexports.default = (0, _postcss.plugin)('cssnano-reduce-positions', function () {\n    return function (css) {\n        return css.walkDecls(transform);\n    };\n});\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-cssnano/node_modules/cssnano/dist/lib/core.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _postcss = require('postcss');\n\nvar atrule = 'atrule';\nvar decl = 'decl';\nvar rule = 'rule';\n\nfunction minimiseWhitespace(node) {\n    var type = node.type;\n\n    if (~[decl, rule, atrule].indexOf(type) && node.raws.before) {\n        node.raws.before = node.raws.before.replace(/\\s/g, '');\n    }\n    if (type === decl) {\n        // Ensure that !important values do not have any excess whitespace\n        if (node.important) {\n            node.raws.important = '!important';\n        }\n        // Remove whitespaces around ie 9 hack\n        node.value = node.value.replace(/\\s*(\\\\9)\\s*/, '$1');\n        // Remove extra semicolons and whitespace before the declaration\n        if (node.raws.before) {\n            var prev = node.prev();\n            if (prev && prev.type !== rule) {\n                node.raws.before = node.raws.before.replace(/;/g, '');\n            }\n        }\n        node.raws.between = ':';\n        node.raws.semicolon = false;\n    } else if (type === rule || type === atrule) {\n        node.raws.between = node.raws.after = '';\n        node.raws.semicolon = false;\n    }\n}\n\nexports.default = (0, _postcss.plugin)('cssnano-core', function () {\n    return function (css) {\n        css.walk(minimiseWhitespace);\n        // Remove final newline\n        css.raws.after = '';\n    };\n});\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-cssnano/node_modules/cssnano/dist/lib/reduceTimingFunctions.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _postcss = require('postcss');\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);\n\nvar _evenValues = require('./evenValues');\n\nvar _evenValues2 = _interopRequireDefault(_evenValues);\n\nvar _getMatch = require('./getMatch');\n\nvar _getMatch2 = _interopRequireDefault(_getMatch);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar keywords = [['ease', [0.25, 0.1, 0.25, 1]], ['linear', [0, 0, 1, 1]], ['ease-in', [0.42, 0, 1, 1]], ['ease-out', [0, 0, 0.58, 1]], ['ease-in-out', [0.42, 0, 0.58, 1]]];\n\nvar getValue = function getValue(node) {\n    return parseFloat(node.value);\n};\nvar getMatch = (0, _getMatch2.default)(keywords);\n\nfunction reduce(node) {\n    if (node.type !== 'function') {\n        return false;\n    }\n    if (node.value === 'steps') {\n        // Don't bother checking the step-end case as it has the same length\n        // as steps(1)\n        if (getValue(node.nodes[0]) === 1 && node.nodes[2] && node.nodes[2].value === 'start') {\n            node.type = 'word';\n            node.value = 'step-start';\n            delete node.nodes;\n            return;\n        }\n        // The end case is actually the browser default, so it isn't required.\n        if (node.nodes[2] && node.nodes[2].value === 'end') {\n            node.nodes = [node.nodes[0]];\n            return;\n        }\n        return false;\n    }\n    if (node.value === 'cubic-bezier') {\n        var match = getMatch(node.nodes.filter(_evenValues2.default).map(getValue));\n\n        if (match.length) {\n            node.type = 'word';\n            node.value = match[0][0];\n            delete node.nodes;\n            return;\n        }\n    }\n}\n\nexports.default = (0, _postcss.plugin)('cssnano-reduce-timing-functions', function () {\n    return function (css) {\n        css.walkDecls(/(animation|transition)(-timing-function|$)/, function (decl) {\n            decl.value = (0, _postcssValueParser2.default)(decl.value).walk(reduce).toString();\n        });\n    };\n});\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-cssnano/node_modules/cssnano/dist/lib/styleCache.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _postcss = require('postcss');\n\nexports.default = (0, _postcss.plugin)('cssnano-reset-stylecache', function () {\n    return function (css, result) {\n        result.root.rawCache = {\n            colon: ':',\n            indent: '',\n            beforeDecl: '',\n            beforeRule: '',\n            beforeOpen: '',\n            beforeClose: '',\n            beforeComment: '',\n            after: '',\n            emptyBody: '',\n            commentLeft: '',\n            commentRight: ''\n        };\n    };\n});\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-cssnano/node_modules/cssnano/quickstart.js":"/*\n * This example targets Node 4 and up.\n */\n\nconst cssnano = require('cssnano');\n\n/*\n * Add your CSS code here.\n */\n\nconst css = `\nh1 {\n    color: #ff0000;\n    font-weight: bold;\n}\n`;\n\n/*\n * Add your configuration here; see http://cssnano.co/options/ and\n * http://cssnano.co/optimisations/ for more details.\n *\n * For example you can turn off z-index rebasing by setting `zindex: false`\n * in your config, or you can use `safe: true` which will turn off unsafe\n * optimisations.\n */\n\nconst opts = {\n\n};\n\n/*\n * Compress the CSS asynchronously and log it to the console.\n */\n\ncssnano.process(css, opts).then(result => {\n    console.log(result.css);\n});\n"}